name: Documentation & Evidence Validation

on:
  push:
    paths: ['**.md', 'docs/**', '**.toml', 'README*']
  pull_request:
    paths: ['**.md', 'docs/**', '**.toml', 'README*']
  workflow_dispatch:

jobs:
  documentation-validation:
    name: Documentation Evidence Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Verify Evidence-Based Claims
        run: |
          echo "üîç Checking for unsupported aspirational claims..."
          
          # Check for claims without evidence
          ASPIRATIONAL_CLAIMS=0
          
          if grep -r "100% complete" . --exclude-dir=target --exclude-dir=.git --exclude-dir=node_modules; then
            echo "‚ùå Found '100% complete' claims - must provide verification evidence"
            ASPIRATIONAL_CLAIMS=$((ASPIRATIONAL_CLAIMS + 1))
          fi
          
          if grep -r "fully implemented" . --exclude-dir=target --exclude-dir=.git --exclude-dir=node_modules; then
            echo "‚ùå Found 'fully implemented' claims - verify with code evidence"
            ASPIRATIONAL_CLAIMS=$((ASPIRATIONAL_CLAIMS + 1))
          fi
          
          if grep -r "production ready" . --exclude-dir=target --exclude-dir=.git --exclude-dir=node_modules | grep -v "VERIFIED" | grep -v "EVIDENCE"; then
            echo "‚ùå Found 'production ready' claims without VERIFIED/EVIDENCE tags"
            ASPIRATIONAL_CLAIMS=$((ASPIRATIONAL_CLAIMS + 1))
          fi
          
          if [ "$ASPIRATIONAL_CLAIMS" -gt 0 ]; then
            echo "‚ùå Found $ASPIRATIONAL_CLAIMS unsupported claims"
            echo "‚ùå All claims must be backed by verification evidence"
            exit 1
          fi
          
          echo "‚úÖ Documentation follows evidence-based approach"
          
      - name: Check Implementation Status Claims
        run: |
          echo "üîç Validating implementation status documentation..."
          
          # Ensure verification script is referenced in status docs
          if ! grep -r "verify_implementation_status.sh" . --include="*STATUS*.md" --include="*IMPLEMENTATION*.md"; then
            echo "‚ùå Status documents must reference verification script"
            exit 1
          fi
          
          # Check for required evidence sections
          for file in $(find . -name "*STATUS*.md" -o -name "*IMPLEMENTATION*.md"); do
            if [ -f "$file" ]; then
              echo "Checking $file for evidence sections..."
              if ! grep -q "VERIFICATION" "$file" && ! grep -q "EVIDENCE" "$file"; then
                echo "‚ùå $file missing VERIFICATION/EVIDENCE section"
                exit 1
              fi
            fi
          done
          
          echo "‚úÖ Implementation status documentation validated"
          
  link-validation:
    name: Link Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Link Check
        uses: lycheeverse/lychee-action@v1
        with:
          args: --verbose --no-progress --exclude-mail --accept=200,403 "**/*.md"
          fail: true
          
  documentation-build:
    name: Documentation Build Test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Build Documentation
        run: |
          cargo doc --all-features --no-deps --document-private-items
          
      - name: Check Documentation Coverage
        run: |
          echo "üîç Checking documentation coverage..."
          # Check for missing documentation on public items
          cargo rustdoc --all-features -- -D missing_docs
          
  markdown-lint:
    name: Markdown Lint
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install markdownlint
        run: npm install -g markdownlint-cli
        
      - name: Lint Markdown
        run: |
          markdownlint "**/*.md" --ignore node_modules --ignore target --config .markdownlint.json || true
          echo "‚úÖ Markdown lint completed (warnings only)"
