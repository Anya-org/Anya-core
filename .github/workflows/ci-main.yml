name: Anya Core CI - Evidence Based
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

# Explicitly define permissions for GITHUB_TOKEN
permissions:
  contents: read

env:
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"

jobs:
  verification:
    name: Implementation Status Verification
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Verification Script
        run: |
          chmod +x scripts/verify_implementation_status.sh
          ./scripts/verify_implementation_status.sh
          
      - name: Enforce Reality Check
        run: |
          # Fail if unimplemented!() macros exceed threshold
          UNIMPL_COUNT=$(grep -r "unimplemented!" --include="*.rs" . | wc -l)
          if [ "$UNIMPL_COUNT" -gt 100 ]; then
            echo "‚ùå Too many unimplemented functions: $UNIMPL_COUNT"
            echo "‚ùå Production threshold exceeded (>100)"
            exit 1
          fi
          echo "‚úÖ Unimplemented count acceptable: $UNIMPL_COUNT"
          
      - name: Upload Verification Report
        uses: actions/upload-artifact@v4
        with:
          name: verification-report
          path: verification_output.txt
          retention-days: 30

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: verification
    strategy:
      matrix:
        rust-version: [stable, beta]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust-version }}
          components: rustfmt, clippy
          
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Build
        run: cargo build --all-features --verbose
        
      - name: Test
        run: cargo test --all-features --verbose
        
      - name: Clippy
        run: cargo clippy --all-features -- -D warnings
        
      - name: Format Check
        run: cargo fmt --all -- --check
        
      - name: Documentation Build
        run: cargo doc --all-features --no-deps
        
      - name: Benchmark Tests
        run: cargo bench --no-run
        
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: verification
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cargo Audit
        run: |
          cargo install cargo-audit --locked
          cargo audit
          
      - name: Dependency Check
        run: |
          cargo tree --duplicates
          
  documentation-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    needs: verification
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Verify Evidence-Based Claims
        run: |
          # Check for aspirational claims without evidence
          echo "üîç Checking for unsupported claims..."
          if grep -r "100% complete" . --exclude-dir=target --exclude-dir=.git; then
            echo "‚ùå Found aspirational '100% complete' claims without evidence"
            exit 1
          fi
          
          if grep -r "fully implemented" . --exclude-dir=target --exclude-dir=.git; then
            echo "‚ùå Found 'fully implemented' claims - verify with code evidence"
            exit 1
          fi
          
          echo "‚úÖ Documentation follows evidence-based approach"
          
      - name: Link Check
        uses: lycheeverse/lychee-action@v1
        with:
          args: --verbose --no-progress --exclude-file .lychee.toml "**/*.md"
          fail: true
