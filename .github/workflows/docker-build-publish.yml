name: Docker Build & Publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*', 'release-*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      publish:
        description: "Publish images (true/false)"
        required: false
        default: "false"

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-test:
    name: Build & Test (Rust)
    runs-on: ubuntu-latest
    timeout-minutes: 90
    steps:
      - uses: actions/checkout@v4
      - name: Extract Version
        id: version
        run: |
          ver=$(grep -m1 '^version' Cargo.toml | head -1 | cut -d '"' -f2)
          echo "version=$ver" >> $GITHUB_OUTPUT
          echo "Detected version: $ver"
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-registry-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: cargo-registry-${{ runner.os }}-
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: cargo-build-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: cargo-build-${{ runner.os }}-
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cargo test (lib only)
        run: cargo test --lib --all-features --no-fail-fast
      - name: Archive test artifacts (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cargo-test-logs
          path: target/debug

  docker:
    name: Docker Build & (Optional) Publish
    runs-on: ubuntu-latest
    needs: build-test
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - name: Extract Version
        id: version
        run: |
          ver=$(grep -m1 '^version' Cargo.toml | head -1 | cut -d '"' -f2)
          echo "version=$ver" >> $GITHUB_OUTPUT
          echo "Detected version: $ver"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        if: ${{ github.event_name == 'push' || github.event.inputs.publish == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build production image
        run: |
          VERSION=${{ steps.version.outputs.version }}
          IMAGE_BASE=ghcr.io/${{ github.repository_owner }}/anya-core
          docker build -f Dockerfile.production --build-arg APP_VERSION=$VERSION -t $IMAGE_BASE:prod-$VERSION -t $IMAGE_BASE:latest .
      - name: Build secure image
        run: |
          VERSION=${{ steps.version.outputs.version }}
          IMAGE_BASE=ghcr.io/${{ github.repository_owner }}/anya-core
          docker build -f Dockerfile.secure --build-arg APP_VERSION=$VERSION -t $IMAGE_BASE:secure-$VERSION -t $IMAGE_BASE:secure-latest .
      - name: Smoke test production image
        run: |
          VERSION=${{ steps.version.outputs.version }}
          IMAGE_BASE=ghcr.io/${{ github.repository_owner }}/anya-core
          cid=$(docker run -d -p 8080:8080 $IMAGE_BASE:prod-$VERSION || true)
          sleep 15
          curl -f http://localhost:8080/health || (echo "Health endpoint failed" && docker logs $cid && exit 1)
          docker logs $cid | tail -50
          docker rm -f $cid || true
      - name: Publish images
        if: ${{ github.event_name == 'push' || github.event.inputs.publish == 'true' }}
        run: |
          VERSION=${{ steps.version.outputs.version }}
          IMAGE_BASE=ghcr.io/${{ github.repository_owner }}/anya-core
          docker push $IMAGE_BASE:prod-$VERSION
          docker push $IMAGE_BASE:latest
          docker push $IMAGE_BASE:secure-$VERSION
          docker push $IMAGE_BASE:secure-latest
      - name: Summary
        run: |
          VERSION=${{ steps.version.outputs.version }}
          echo "Built images for version $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "Use 'docker pull ghcr.io/${{ github.repository_owner }}/anya-core:prod-$VERSION'" >> $GITHUB_STEP_SUMMARY
