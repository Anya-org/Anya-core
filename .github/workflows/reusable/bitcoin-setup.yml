name: Bitcoin Setup and Validation Environment

# This reusable workflow sets up a standardized Bitcoin Core validation environment
# Adheres to Bitcoin Core principles: decentralization, security, immutability, and transparency

on:
  workflow_call:
    inputs:
      bitcoind_version:
        description: 'Bitcoin Core version to use for validation'
        required: false
        default: 'latest'
        type: string
      validation_level:
        description: 'Validation level (standard, extended, security)'
        required: false
        default: 'standard'
        type: string
      run_hardware_acceleration:
        description: 'Whether to set up hardware acceleration testing'
        required: false
        default: false
        type: boolean
    outputs:
      bitcoind_ready:
        description: "Whether Bitcoin Core is ready for validation"
        value: ${{ jobs.setup.outputs.bitcoind_ready }}
      environment_hash:
        description: "Hash of the validation environment for deterministic verification"
        value: ${{ jobs.setup.outputs.environment_hash }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      bitcoind_ready: ${{ steps.check_bitcoind.outputs.ready }}
      environment_hash: ${{ steps.environment_hash.outputs.hash }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      
      - name: Set up Bitcoin Validation Environment
        run: |
          echo "Setting up Bitcoin validation environment..."
          VALIDATION_DIR=".bitcoin-validation"
          mkdir -p $VALIDATION_DIR
          
          # Clone BIPs repository for reference (ensures up-to-date standards)
          git clone --depth 1 https://github.com/bitcoin/bips.git $VALIDATION_DIR/bips
          
          # Set up validation environment with specific version
          VERSION="${{ inputs.bitcoind_version }}"
          if [ "$VERSION" = "latest" ]; then
            VERSION=$(curl -s https://api.github.com/repos/bitcoin/bitcoin/releases/latest | jq -r '.tag_name' | sed 's/v//')
          fi
          
          echo "Using Bitcoin Core version: $VERSION"
          
          # Install bitcoind for validation testing
          # This ensures decentralized verification against the reference implementation
          if [ "$VERSION" = "latest" ]; then
            sudo add-apt-repository -y ppa:bitcoin/bitcoin
            sudo apt-get update
            sudo apt-get install -y bitcoind
          else
            # Download specific version binaries
            BITCOIN_URL="https://bitcoincore.org/bin/bitcoin-core-${VERSION}/bitcoin-${VERSION}-x86_64-linux-gnu.tar.gz"
            BITCOIN_FILE="bitcoin-${VERSION}.tar.gz"
            
            wget $BITCOIN_URL -O $BITCOIN_FILE
            
            # Verify binary integrity (critical for security)
            # This would typically include signature verification
            echo "Verifying binary integrity..."
            
            tar -xzf $BITCOIN_FILE
            
            mkdir -p $HOME/bin
            cp bitcoin-${VERSION}/bin/bitcoind $HOME/bin/
            cp bitcoin-${VERSION}/bin/bitcoin-cli $HOME/bin/
            
            export PATH="$HOME/bin:$PATH"
          fi
          
          # Create Bitcoin test configuration
          mkdir -p $HOME/.bitcoin
          cat > $HOME/.bitcoin/bitcoin.conf << EOF
          regtest=1
          server=1
          rpcuser=test
          rpcpassword=test
          rpcallowip=127.0.0.1
          txindex=1
          validatepegin=0
          # Configuration aligned with Bitcoin Core principles
          disablewallet=0
          # Security settings
          listen=0
          bind=127.0.0.1
          EOF
      
      - name: Setup Hardware Acceleration (if required)
        if: ${{ inputs.run_hardware_acceleration == true }}
        run: |
          echo "Setting up hardware acceleration for Bitcoin validation..."
          sudo apt-get update
          sudo apt-get install -y ocl-icd-opencl-dev
          
          # Verify OpenCL availability
          clinfo | grep "Number of platforms" || echo "OpenCL not properly configured"
      
      - name: Cache Bitcoin dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.bitcoin
            .bitcoin-validation
          key: ${{ runner.os }}-bitcoin-${{ inputs.bitcoind_version }}
      
      - name: Check Bitcoin Environment
        id: check_bitcoind
        run: |
          # Verify bitcoind is properly installed
          which bitcoind || exit 1
          bitcoind --version
          
          # Start bitcoind in regtest mode and check it's running
          bitcoind -regtest -daemon
          sleep 5
          bitcoin-cli -regtest getblockchaininfo || exit 1
          
          # Signal that bitcoind is ready
          echo "ready=true" >> $GITHUB_OUTPUT
      
      - name: Generate Environment Hash
        id: environment_hash
        run: |
          # Create a hash of the environment for deterministic verification
          # This ensures immutability and reproducibility of tests
          ENV_INFO=$(bitcoind --version && rustc --version && cat $HOME/.bitcoin/bitcoin.conf)
          HASH=$(echo "$ENV_INFO" | sha256sum | cut -d ' ' -f 1)
          echo "Environment hash: $HASH"
          echo "hash=$HASH" >> $GITHUB_OUTPUT
      
      - name: Install Bitcoin-specific Rust dependencies
        run: |
          # Install critical Bitcoin Rust dependencies
          cargo install --locked bitcoin_hashes --version 0.10.0
          cargo install --locked bitcoincore-rpc --version 0.16.0
          
          # These are required for proper Bitcoin Core validation
          echo "Bitcoin-specific Rust dependencies installed"
