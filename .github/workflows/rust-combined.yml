name: Rust CI (Combined)

on:
  push:
    branches: [ main, new-develop ]
    paths:
      - '**/*.rs'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/rust-combined.yml'
  pull_request:
    branches: [ main, new-develop ]
    paths:
      - '**/*.rs'
      - 'Cargo.toml'
      - 'Cargo.lock'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
          override: true
          
      - name: Check formatting
        run: cargo fmt --all -- --check
        
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        
      - name: Check protocol adherence
        run: |
          cargo test --features protocol_adherence
          
  unit-tests:
    name: Unit Tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        rust: [stable]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Run core tests
        run: cargo test --workspace
        
      - name: Run Bitcoin module tests
        run: cargo test bitcoin
        
      - name: Run Web5 module tests
        run: cargo test web5
        
      - name: Run Layer2 module tests
        run: cargo test layer2
        
  coverage:
    name: Test Coverage
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin
        
      - name: Run tarpaulin
        run: cargo tarpaulin --out Xml --verbose --workspace --timeout 120
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false
          verbose: true

  integration-tests:
    name: Integration Tests
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          
      - name: Run integration tests
        run: cargo test --test '*_integration' -- --test-threads=1
        
      - name: Test with enterprise features
        run: cargo test --features enterprise
        
      - name: Test with web5 features
        run: cargo test --features web5 