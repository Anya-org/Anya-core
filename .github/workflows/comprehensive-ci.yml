name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  RUSTFLAGS: "-D warnings"
  CI_PIPELINE_VERSION: "2025.1"

jobs:
  pre-validation:
    name: Pre-validation
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
      skip-tests: ${{ steps.changes.outputs.skip-tests }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            docs:
              - 'docs/**'
              - '*.md'
            rust:
              - 'src/**'
              - 'Cargo.*'
            scripts:
              - 'scripts/**'
            workflows:
              - '.github/**'

      - name: Setup Test Matrix
        id: matrix
        run: |
          if [[ "${{ steps.changes.outputs.rust }}" == "true" ]]; then
            echo "matrix={\"os\":[\"ubuntu-latest\",\"windows-latest\",\"macos-latest\"],\"rust\":[\"stable\",\"beta\"]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"os\":[\"ubuntu-latest\"],\"rust\":[\"stable\"]}" >> $GITHUB_OUTPUT
          fi

      - name: Run Pre-validation Script
        run: |
          if [[ -f "./scripts/automation/ci_pipeline.sh" ]]; then
            chmod +x ./scripts/automation/ci_pipeline.sh
            ./scripts/automation/ci_pipeline.sh pre_validation
          fi

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: pre-validation
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          override: true

      - name: Cache Cargo Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-security-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Security Audit
        run: |
          cargo install --locked cargo-audit
          cargo audit --json > security-audit.json || true

      - name: Security Clippy Analysis
        run: |
          cargo clippy --all-targets --all-features -- -D warnings \
            -W clippy::unwrap_used \
            -W clippy::expect_used \
            -W clippy::panic \
            -W clippy::unimplemented

      - name: Run Custom Security Tests
        run: |
          if [[ -f "./scripts/automation/ci_pipeline.sh" ]]; then
            ./scripts/automation/ci_pipeline.sh security_testing
          fi

      - name: Upload Security Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: security-audit.json
        continue-on-error: true

  rust-tests:
    name: Rust Tests (${{ matrix.os }}, ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    needs: [pre-validation, security-audit]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.pre-validation.outputs.matrix) }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy
          override: true

      - name: Cache Cargo Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Format Check
        if: matrix.os == 'ubuntu-latest' && matrix.rust == 'stable'
        run: cargo fmt -- --check

      - name: Contract Compilation
        run: |
          if [[ -f "./scripts/automation/ci_pipeline.sh" ]]; then
            ./scripts/automation/ci_pipeline.sh contract_compilation
          fi

      - name: Unit Tests
        run: |
          cargo test --workspace --verbose
          if [[ -f "./scripts/automation/ci_pipeline.sh" ]]; then
            ./scripts/automation/ci_pipeline.sh unit_testing
          fi

      - name: Integration Tests
        run: |
          cargo test --workspace --test integration
          if [[ -f "./scripts/automation/ci_pipeline.sh" ]]; then
            ./scripts/automation/ci_pipeline.sh integration_testing
          fi

      - name: Performance Tests
        if: matrix.os == 'ubuntu-latest' && matrix.rust == 'stable'
        run: |
          cargo install --locked cargo-criterion || true
          cargo bench --workspace
          if [[ -f "./scripts/automation/ci_pipeline.sh" ]]; then
            ./scripts/automation/ci_pipeline.sh performance_testing
          fi

  compliance-validation:
    name: Compliance Validation
    runs-on: ubuntu-latest
    needs: rust-tests
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Bitcoin Protocol Compliance
        run: |
          if [[ -f "./scripts/automation/ci_pipeline.sh" ]]; then
            ./scripts/automation/ci_pipeline.sh compliance_validation
          fi

      - name: Documentation Validation
        run: |
          cargo doc --workspace --no-deps
          
      - name: License Compliance Check
        run: |
          cargo install --locked cargo-license || true
          cargo license --json > license-report.json

  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: rust-tests
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install Coverage Tools
        run: |
          cargo install --locked cargo-tarpaulin

      - name: Generate Coverage Report
        run: |
          cargo tarpaulin --out Xml --timeout 300 --workspace \
            --exclude-files "tests/*" "benches/*" \
            --ignore-panics --ignore-tests

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: cobertura.xml
          fail_ci_if_error: false

  deployment-preparation:
    name: Deployment Preparation
    runs-on: ubuntu-latest
    needs: [rust-tests, compliance-validation, coverage]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Prepare Deployment
        run: |
          if [[ -f "./scripts/automation/ci_pipeline.sh" ]]; then
            ./scripts/automation/ci_pipeline.sh deployment_preparation
          fi

      - name: Generate CI Metrics
        run: |
          # Generate comprehensive metrics report
          ./scripts/generate_ci_metrics.sh

      - name: Archive Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            target/release/
            ci_metrics.json
            *.md
          retention-days: 30

  cross-repo-sync:
    name: Cross-Repository Sync
    runs-on: ubuntu-latest
    needs: deployment-preparation
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Sync Repositories
        run: |
          if [[ -f "./sync-repository.js" ]]; then
            node sync-repository.js
          fi

      - name: Trigger Dependent Pipelines
        run: |
          # Trigger CI in related repositories
          repos=("anya-web5" "anya-mobile" "anya-bitcoin")
          for repo in "${repos[@]}"; do
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/anya-org/$repo/dispatches" \
              -d '{"event_type":"sync-trigger","client_payload":{"source":"anya-core","commit":"${{ github.sha }}"}}'
          done

  notification:
    name: Pipeline Notification
    runs-on: ubuntu-latest
    needs: [pre-validation, security-audit, rust-tests, compliance-validation, coverage, deployment-preparation]
    if: always()
    steps:
      - name: Determine Pipeline Status
        id: status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "status=cancelled" >> $GITHUB_OUTPUT
            echo "emoji=⏸️" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
          fi

      - name: Create Status Report
        run: |
          cat > pipeline_status.md << EOF
          # ${{ steps.status.outputs.emoji }} CI/CD Pipeline Status
          
          **Branch**: \`${{ github.ref_name }}\`
          **Commit**: \`${{ github.sha }}\`
          **Status**: ${{ steps.status.outputs.status }}
          **Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## Job Results
          - Pre-validation: ${{ needs.pre-validation.result }}
          - Security Audit: ${{ needs.security-audit.result }}
          - Rust Tests: ${{ needs.rust-tests.result }}
          - Compliance: ${{ needs.compliance-validation.result }}
          - Coverage: ${{ needs.coverage.result }}
          - Deployment Prep: ${{ needs.deployment-preparation.result }}
          EOF

      - name: Upload Status Report
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-status-${{ github.sha }}
          path: pipeline_status.md
