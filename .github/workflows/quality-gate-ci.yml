name: Quality Gate CI - Strict Adherence Enforcement

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-gate:
    runs-on: ubuntu-latest
    name: Quality Gate Enforcement
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper commit message validation
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: rustfmt, clippy
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache target directory
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev

    - name: Run Quality Gate - Full Validation
      run: |
        chmod +x scripts/quality_gate.sh
        ./scripts/quality_gate.sh --ci
      env:
        RUST_BACKTRACE: 1

    - name: Verify Implementation Status
      run: |
        chmod +x scripts/verify_implementation_status.sh
        ./scripts/verify_implementation_status.sh > implementation_status.txt
        cat implementation_status.txt

    - name: Upload Quality Gate Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-gate-report
        path: |
          implementation_status.txt
          
    - name: Comment PR with Status
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const status = fs.readFileSync('implementation_status.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üîç Quality Gate Status\n\n\`\`\`\n${status}\n\`\`\``
            });
          } catch (error) {
            console.log('Could not read status file:', error);
          }

  security-scan:
    runs-on: ubuntu-latest
    name: Security & Secret Scanning
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run Gitleaks
      uses: zricethezav/gitleaks-action@v1
      with:
        config-path: .gitleaks.toml
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  documentation-validation:
    runs-on: ubuntu-latest
    name: Evidence-Based Documentation Check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for Aspirational Claims
      run: |
        echo "üîç Checking for aspirational claims without evidence..."
        
        # Check for claims without evidence
        if grep -r "100% complete\|fully implemented\|production ready" . \
           --exclude-dir=target --exclude-dir=.git --exclude-dir=node_modules \
           --exclude="*.log" | grep -v "Evidence:\|Verification:" > aspirational_claims.txt; then
          echo "‚ùå Found aspirational claims without evidence:"
          cat aspirational_claims.txt
          exit 1
        fi
        
        echo "‚úÖ No aspirational claims without evidence found"
        
    - name: Validate Documentation Links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/mlc_config.json'
        
    - name: Check Documentation Currency
      run: |
        echo "üîç Checking documentation currency..."
        
        # Check if key status files are updated
        OLD_FILES=$(find . -name "IMPLEMENTATION_STATUS_*.md" -mtime +7 2>/dev/null | wc -l)
        if [ "$OLD_FILES" -gt 0 ]; then
          echo "‚ö†Ô∏è Warning: Some status documentation is older than 7 days"
          find . -name "IMPLEMENTATION_STATUS_*.md" -mtime +7 2>/dev/null
        fi
        
        echo "‚úÖ Documentation currency check completed"

  performance-baseline:
    runs-on: ubuntu-latest
    name: Performance Regression Check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        
    - name: Run Performance Tests
      run: |
        echo "üöÄ Running performance baseline tests..."
        
        # Compilation time benchmark
        time cargo check --all-features > compile_time.txt 2>&1
        
        # Test execution time
        if [ -d "tests" ]; then
          time cargo test --release > test_time.txt 2>&1 || true
        fi
        
        echo "üìä Performance metrics collected"
        
    - name: Upload Performance Metrics
      uses: actions/upload-artifact@v3
      with:
        name: performance-metrics
        path: |
          compile_time.txt
          test_time.txt

  # Release gate - only runs on main branch
  release-gate:
    runs-on: ubuntu-latest
    name: Release Readiness Gate
    if: github.ref == 'refs/heads/main'
    needs: [quality-gate, security-scan, documentation-validation]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        
    - name: Release Readiness Check
      run: |
        echo "üöÄ Checking release readiness..."
        
        chmod +x scripts/quality_gate.sh
        ./scripts/quality_gate.sh --full
        
        # Check specific release criteria
        UNIMPL_COUNT=$(grep -r "unimplemented!" --include="*.rs" . 2>/dev/null | wc -l)
        TODO_COUNT=$(grep -r "todo!" --include="*.rs" . 2>/dev/null | wc -l)
        WARNING_COUNT=$(cargo check --all-features 2>&1 | grep "warning:" | wc -l)
        
        echo "üìä Release metrics:"
        echo "  ‚Ä¢ Unimplemented functions: $UNIMPL_COUNT"
        echo "  ‚Ä¢ TODO stubs: $TODO_COUNT"
        echo "  ‚Ä¢ Compilation warnings: $WARNING_COUNT"
        
        # Strict release criteria
        if [ "$UNIMPL_COUNT" -gt 0 ]; then
          echo "‚ùå RELEASE BLOCKED: Unimplemented functions found"
          exit 1
        fi
        
        if [ "$WARNING_COUNT" -gt 5 ]; then
          echo "‚ùå RELEASE BLOCKED: Too many compilation warnings"
          exit 1
        fi
        
        echo "‚úÖ RELEASE APPROVED: All quality gates passed"
