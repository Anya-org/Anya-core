name: Unified CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"

jobs:
  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Init Submodules
        run: |
          git submodule sync
          git submodule update --init --recursive
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy
      - name: Install rustfmt for nightly
        run: rustup component add --toolchain nightly-x86_64-unknown-linux-gnu rustfmt
      - name: Check formatting
        run: cargo fmt -- --check
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Run cargo audit
        run: |
          cargo install cargo-audit
          cargo audit
      - name: Run Secret Scanning
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Dependency Review
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: rust
      - name: Build for Analysis
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  test:
    name: Test
    permissions:
      contents: read
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        rust: [stable, beta]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Install Protoc
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run tests
        run: cargo test --all-features --verbose
      - name: Install cargo-tarpaulin
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cargo-tarpaulin
      - name: Run tarpaulin
        if: matrix.os == 'ubuntu-latest'
        run: cargo tarpaulin --out Xml --verbose --workspace --timeout 120
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false
          verbose: true

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Build Documentation
        run: |
          cargo doc --all-features --no-deps --document-private-items
      - name: Check Documentation Coverage
        run: |
          cargo rustdoc --all-features -- -D missing_docs
      - name: Link Check
        uses: lycheeverse/lychee-action@v1
        with:
          args: --verbose --no-progress --exclude-mail --accept=200,403 "**/*.md"
          fail: true

  release-gate:
    name: Release Gate
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-audit, test, docs]
    steps:
      - uses: actions/checkout@v4
      - name: Release Readiness Check
        run: |
          echo "üöÄ Checking release readiness..."
          # Add strict release checks here
          UNIMPL_COUNT=$(grep -r "unimplemented!" --include="*.rs" . 2>/dev/null | wc -l)
          if [ "$UNIMPL_COUNT" -gt 0 ]; then
            echo "‚ùå RELEASE BLOCKED: Unimplemented functions found"
            exit 1
          fi
          echo "‚úÖ RELEASE APPROVED: All quality gates passed"
