name: Core CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Run cargo audit
        run: |
          cargo install cargo-audit
          cargo audit
          
      - name: Run Secret Scanning
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Dependency Review
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4
      
  code-scanning:
    name: Code Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: rust
          
      - name: Build for Analysis
        uses: github/codeql-action/autobuild@v3
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  rust-test:
    name: Rust Tests
    permissions:
      contents: read
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        rust: [stable]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy
        
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
      - name: Check formatting
        if: matrix.os == 'ubuntu-latest'
        run: cargo fmt -- --check
      
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Run core tests
        run: cargo test --workspace
      
      - name: Run tests with enterprise feature
        run: cargo test --workspace --features enterprise
      
      - name: Test Bitcoin modules
        run: cargo test -p anya-bitcoin
      
      - name: Test Web5 modules
        run: cargo test -p anya-web5

  coverage:
    name: Test Coverage
    needs: [rust-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
    
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
        
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin
      
      - name: Run tarpaulin
        run: cargo tarpaulin --out Xml --verbose --workspace --timeout 120
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false
          verbose: true

  notify:
    name: Notification
    needs: [rust-test, coverage]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify on success
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const message = "✅ Core CI Pipeline completed successfully!";
            if (context.issue && context.issue.number) {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });
            }
          
      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const message = "❌ Core CI Pipeline failed. Please check the logs for details.";
            if (context.issue && context.issue.number) {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });
            }