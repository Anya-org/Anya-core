name: AI Code Review

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup reviewdog properly
      - name: Setup Reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: v0.14.1

      # Run reviewdog properly
      - name: Run Code Review
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          reviewdog -reporter=github-pr-review -filter-mode=nofilter -fail-on-error=false -level=warning

      # Fix CodeQL setup
      - name: Setup CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      # Proper CodeQL analysis step
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      # Replace unavailable CodiumAI action with github-script
      - name: Performance Check
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { execSync } = require('child_process');
            
            // Bitcoin-specific validation
            console.log('Running Bitcoin protocol checks...');
            try {
                execSync('cargo test --test bitcoin_consensus -- --test-threads=1', {
                  env: {
                    ...process.env,
                    RUST_TEST_THREADS: '1',
                    BTC_TEST_TIMEOUT: '300',
                    MEMORY_LIMIT: '4G'
                  },
                  stdio: 'inherit',
                  maxBuffer: 1024 * 1024 * 100  # 100MB output buffer
                });
                const mempoolSize = execSync('curl -s http://localhost:3000/metrics | grep mempool_size').toString();
                const taprootAdoption = execSync('curl -s http://localhost:3000/metrics | grep taproot_usage').toString();
                
                core.setOutput('mempool_size', mempoolSize.match(/mempool_size (\d+)/)[1]);
                core.setOutput('taproot_adoption', taprootAdoption.match(/taproot_usage (\d+\.\d+)/)[1]);
                
            } catch (error) {
                core.setFailed(`Bitcoin validation failed: ${error.message}`);
            }

      - name: Bitcoin Protocol Validation
        run: |
          cargo test --test bip_validation \
            --features "bitcoin-consensus taproot" \
            -- --test-threads=1 \
            --ignored

      - name: Security Audit Trail
        run: |
          git log --since="24 hours" --grep='SECURITY' | \
          awk '/^commit/ {print "Security Update:", $0}'
          
      - name: Prometheus Metrics Check
        run: |
          curl -s http://localhost:3000/metrics | \
          grep -E 'bip_compliance{type="(341|342|174)"} 1' || \
          (echo "BIP compliance metrics missing" && exit 1)

  label:
    needs: review
    runs-on: ubuntu-latest
    steps:
      - name: Label PR
        uses: actions/labeler@v5
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          configuration-path: .github/labeler.yml
          sync-labels: true