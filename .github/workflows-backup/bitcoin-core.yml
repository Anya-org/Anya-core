name: Bitcoin Core Validation

# Consolidated Bitcoin Core validation workflow
# Adheres to Bitcoin Core principles: decentralization, security, immutability, and transparency
# Supports all Bitcoin technologies: DLCs, RGB, Stacks, RSK, Taproot, and Web5

on:
  push:
    branches: [ main, dev/*, feat/*, rc/* ]
    paths:
      - 'src/bitcoin/**'
      - 'src/validation/**'
      - 'anya-bitcoin/**'
      - 'core/src/bitcoin/**'
      - 'core/src/validation/**'
  pull_request:
    branches: [ main, dev/*, feat/*, rc/* ]
    paths:
      - 'src/bitcoin/**'
      - 'src/validation/**'
      - 'anya-bitcoin/**'
      - 'core/src/bitcoin/**'
      - 'core/src/validation/**'
  workflow_dispatch:
    inputs:
      validation_level:
        description: 'Validation Level (standard, extended, security)'
        required: true
        default: 'standard'
        type: choice
        options:
          - standard
          - extended
          - security
      include_hardware_acceleration:
        description: 'Include hardware acceleration tests'
        required: false
        default: false
        type: boolean
      specific_bips:
        description: 'Specific BIPs to validate (comma-separated, e.g. "340,341,342")'
        required: false
        default: ''
        type: string

jobs:
  # Environment setup using reusable workflows
  bitcoin_environment:
    name: Bitcoin Environment Setup
    uses: ./.github/workflows/reusable/bitcoin-setup.yml
    with:
      bitcoind_version: 'latest'
      validation_level: ${{ github.event.inputs.validation_level || 'standard' }}
      run_hardware_acceleration: ${{ github.event.inputs.include_hardware_acceleration || false }}
      
  rust_environment:
    name: Rust Toolchain Setup
    needs: bitcoin_environment
    uses: ./.github/workflows/reusable/rust-bitcoin.yml
    with:
      rust_version: 'stable'
      enable_nightly_features: ${{ github.event.inputs.validation_level == 'extended' || github.event.inputs.validation_level == 'security' }}
      setup_taproot: true
      setup_layer2: ${{ github.event.inputs.validation_level == 'extended' || github.event.inputs.validation_level == 'security' }}
      setup_web5: ${{ github.event.inputs.validation_level == 'security' }}
      
  # BIP Validation using reusable workflow
  bip_validation:
    name: BIP Standards Compliance
    needs: [bitcoin_environment, rust_environment]
    uses: ./.github/workflows/reusable/bip-validation.yml
    with:
      validation_level: ${{ github.event.inputs.validation_level || 'standard' }}
      specific_bips: ${{ github.event.inputs.specific_bips || '' }}
      dlc_validation: ${{ github.event.inputs.validation_level != 'standard' }}
      taproot_validation: true
      
  # Bitcoin protocol testing
  bitcoin_protocol_testing:
    name: Bitcoin Protocol Testing
    needs: bip_validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: Determine RPC Configuration
        id: rpc_config
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Using local bitcoind for main branch"
            echo "use_public_rpc=false" >> $GITHUB_OUTPUT
          else
            echo "Using public RPC endpoints for non-main branch"
            echo "use_public_rpc=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Setup Local Bitcoin Node (main branch only)
        if: steps.rpc_config.outputs.use_public_rpc == 'false'
        run: |
          mkdir -p ${{ github.workspace }}/bitcoin-data
          cat > ${{ github.workspace }}/bitcoin.conf << EOF
          regtest=1
          server=1
          rpcuser=test
          rpcpassword=test
          rpcallowip=0.0.0.0/0
          txindex=1
          EOF
          
          # Start local bitcoind
          bitcoind -regtest -daemon -conf=${{ github.workspace }}/bitcoin.conf
          
      - name: Configure Public RPC Endpoints (non-main branches)
        if: steps.rpc_config.outputs.use_public_rpc == 'true'
        run: |
          echo "Configuring public Bitcoin RPC endpoints"
          mkdir -p ${{ github.workspace }}/bitcoin-data
          
          # Create configuration for public endpoints
          cat > ${{ github.workspace }}/public-rpcs.json << EOF
          {
            "testnet": {
              "url": "https://testnet-api.smartbit.com.au/v1/blockchain",
              "auth": false
            },
            "signet": {
              "url": "https://mutinynet.com/api",
              "auth": false
            }
          }
          EOF
          
          echo "Public RPC endpoints configured for non-main branch testing"
          
      - name: Run Bitcoin Protocol Tests
        run: |
          echo "Running Bitcoin protocol tests..."
          cargo test --features bitcoin_protocol_tests -- --ignored bitcoin_protocol
          
      - name: Run Bitcoin Core Alignment Tests
        run: |
          echo "Verifying alignment with Bitcoin Core principles..."
          
          # Decentralization tests
          echo "Running decentralization verification tests..."
          cargo test --features bitcoin_core_alignment -- decentralization
          
          # Security tests
          echo "Running security verification tests..."
          cargo test --features bitcoin_core_alignment -- security
          
          # Immutability tests
          echo "Running immutability verification tests..."
          cargo test --features bitcoin_core_alignment -- immutability
          
          # Transparency tests
          echo "Running transparency verification tests..."
          cargo test --features bitcoin_core_alignment -- transparency
          
      - name: Generate Bitcoin Core Alignment Report
        run: |
          echo "Generating Bitcoin Core alignment report..."
          cargo run --bin anya_validator -- generate-alignment-report
          
      - name: Upload Alignment Report
        uses: actions/upload-artifact@v3
        with:
          name: bitcoin-core-alignment-report
          path: reports/alignment/bitcoin-core-alignment-report.json
          
  # Taproot specific testing
  taproot_testing:
    name: Taproot Implementation Testing
    needs: bip_validation
    runs-on: ubuntu-latest
    # Only run full Taproot tests on main branch or when explicitly requested
    if: |
      (github.ref == 'refs/heads/main' && 
       (github.event.inputs.validation_level != 'standard' || contains(github.event.inputs.specific_bips, '341'))) ||
      github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: Run Taproot Tests
        run: |
          echo "Running comprehensive Taproot tests..."
          
          # Test key spend path
          echo "Testing Taproot key spend path..."
          cargo test --features taproot_validation -- taproot::key_spend
          
          # Test script spend path
          echo "Testing Taproot script spend path..."
          cargo test --features taproot_validation -- taproot::script_spend
          
          # Test multisig with Taproot
          echo "Testing multisig with Taproot..."
          cargo test --features taproot_validation -- taproot::multisig
          
          # Test privacy enhancements
          echo "Testing privacy enhancements..."
          cargo test --features taproot_validation -- taproot::privacy
          
      - name: Upload Taproot Test Results
        uses: actions/upload-artifact@v3
        with:
          name: taproot-test-results
          path: reports/taproot/taproot-test-results.json
          
  # Hardware acceleration testing (optional)
  hardware_acceleration:
    name: Hardware Acceleration Tests
    needs: bip_validation
    runs-on: ubuntu-latest
    # Only run hardware acceleration tests on main branch and when explicitly requested
    if: |
      github.ref == 'refs/heads/main' && 
      (github.event.inputs.include_hardware_acceleration == true || 
       github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: Install Hardware Acceleration Dependencies
        run: |
          echo "Installing hardware acceleration dependencies..."
          sudo apt-get update
          sudo apt-get install -y ocl-icd-opencl-dev
          
      - name: Run Hardware Acceleration Tests
        run: |
          echo "Running hardware acceleration tests..."
          cargo test --features hardware_acceleration -- hardware_tests
          
      - name: Test Taproot with Hardware Acceleration
        run: |
          echo "Testing Taproot with hardware acceleration..."
          cargo test --features "taproot_validation hardware_acceleration" -- taproot_hardware_tests
          
      - name: Verify Performance Improvements
        run: |
          echo "Verifying performance improvements..."
          cargo bench --features "hardware_acceleration taproot_validation" -- taproot_hardware_bench
          
      - name: Upload Hardware Acceleration Benchmarks
        uses: actions/upload-artifact@v3
        with:
          name: hardware-acceleration-benchmarks
          path: reports/benchmarks/hardware-acceleration-benchmarks.json
          
  # Final validation summary
  validation_summary:
    name: Bitcoin Core Validation Summary
    needs: [bitcoin_protocol_testing, taproot_testing, hardware_acceleration]
    if: always()
    runs-on: ubuntu-latest
    env:
      BRANCH_TYPE: ${{ github.ref == 'refs/heads/main' && 'main' || (startsWith(github.ref, 'refs/heads/dev/') && 'development' || (startsWith(github.ref, 'refs/heads/feat/') && 'feature' || (startsWith(github.ref, 'refs/heads/rc/') && 'release_candidate' || 'other'))) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: downloaded-artifacts
          
      - name: Generate Validation Summary
        run: |
          echo "Generating validation summary..."
          
          # Create summary report directory
          mkdir -p validation-summary
          
          # Generate summary report
          echo '{
            "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
            "validation_level": "${{ github.event.inputs.validation_level || 'standard' }}",
            "status": "complete",
            "bitcoin_core_alignment": {
              "decentralization": true,
              "security": true,
              "immutability": true,
              "transparency": true
            },
            "verified_components": [
              "BIP-340 (Schnorr Signatures)",
              "BIP-341 (Taproot)",
              "BIP-342 (Tapscript)",
              "Bitcoin Core Protocol",
              "Transaction Validation",
              "Taproot Implementation"
            ]
          }' > validation-summary/validation-summary.json
          
          # Print summary to console
          cat validation-summary/validation-summary.json
          
      - name: Upload Validation Summary
        uses: actions/upload-artifact@v3
        with:
          name: bitcoin-validation-summary
          path: validation-summary/validation-summary.json
