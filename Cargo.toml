# Anya Core - LTS-focused Dependencies
# Using Long-Term Support versions for stability and compatibility

[workspace]
resolver = "2"
members = [
    ".",
]

[workspace.package]
version = "1.3.0"
edition = "2021"
rust-version = "1.70.0"  # LTS Rust version
authors = ["botshelomokoka+anya-core@gmail.com"]
license = "MIT"
repository = "https://github.com/anya-org/anya-core"
description = "Enterprise-grade Bitcoin Infrastructure Platform"

[workspace.dependencies]
# === LTS Bitcoin & Cryptography Stack ===
# Unified secp256k1 version - aligned with bitcoin ecosystem
bitcoin = { version = "0.32.6", features = ["std", "serde", "rand", "secp-recovery", "base64", "rand-std"] }
secp256k1 = { version = "0.29.1", features = ["global-context", "recovery", "rand"] }
bitcoincore-rpc = { version = "0.19.0", features = ["default"] }
bitcoin_hashes = { version = "0.14.0", features = ["std", "serde"] }
miniscript = { version = "12.3.5", features = ["std", "compiler"] }
bdk_wallet = { version = "2.0.0", features = ["std", "all-keys"] }

# === LTS Runtime & Async ===
tokio = { version = "1.45.1", features = ["full"] }
futures = { version = "0.3.31" }
async-trait = { version = "0.1.88" }

# === LTS Serialization ===
serde = { version = "1.0.219", features = ["derive", "rc"] }
serde_json = { version = "1.0.140", features = ["std", "preserve_order", "arbitrary_precision"] }
humantime-serde = { version = "1.1.1" }

# === LTS HTTP & Networking ===
axum = { version = "0.8.4" }
tower = { version = "0.5.2" }
tower-http = { version = "0.6.6", features = ["cors", "trace"] }
hyper = { version = "1.6.0", features = ["full"] }
reqwest = { version = "0.12.22", features = ["json", "rustls-tls"] }

# === LTS Cryptography ===
aes-gcm = { version = "0.10.3" }
chacha20poly1305 = { version = "0.10.1" }
blake3 = { version = "1.8.2" }
rand = { version = "0.8.5" }
rand_core = { version = "0.6.4" }

# === LTS Utilities ===
chrono = { version = "0.4.34", features = ["serde", "std"] }
uuid = { version = "1.17.0", features = ["v4", "serde"] }
anyhow = { version = "1.0.98", features = ["std", "backtrace"] }
thiserror = { version = "1.0.69" }
tracing = { version = "0.1.41" }
tracing-subscriber = { version = "0.3.19", features = ["env-filter"] }

# === Testing ===
criterion = { version = "0.6.0", features = ["html_reports", "async"] }
mockall = { version = "0.13.1" }
tempfile = { version = "3.20.0" }
tokio-test = { version = "0.4.4" }
tower-test = { version = "0.4.0" }
test-log = { version = "0.2.16" }
wiremock = { version = "0.6.2" }

# === Development ===
once_cell = { version = "1.21.3" }
lazy_static = { version = "1.5.0" }
dashmap = { version = "6.1.0", features = ["serde"] }
rayon = { version = "1.10.0" }
geiger = { version = "0.5.0" }

# === Missing Dependencies ===
hickory-resolver = { version = "0.24.1", features = ["dns-over-rustls"] }
sha2 = { version = "0.10.8" }
log = { version = "0.4.27" }
walkdir = { version = "2.5.0" }
rand_distr = { version = "0.4.3" }

# === Enterprise Dependencies ===
yubihsm = { version = "0.42.1" }
sgx_urts = { version = "1.1.1" }
sqlx = { version = "0.8.2", features = ["runtime-tokio-rustls", "postgres"] }

[package]
name = "anya-core"
version = { workspace = true }
edition = { workspace = true }
rust-version = { workspace = true }
description = { workspace = true }
authors = { workspace = true }
license = { workspace = true }
repository = { workspace = true }
readme = "README.md"
keywords = ["bitcoin", "cryptocurrency", "blockchain", "enterprise", "mobile"]
categories = ["api-bindings", "cryptography::cryptocurrencies"]

[lib]
name = "anya_core"
crate-type = ["lib", "staticlib", "cdylib"]

[features]
default = ["std", "bitcoin", "mobile"]
std = []
# Bitcoin implementation features
# [AIR-3][AIS-3][BPC-3] Enhanced Feature Flags with HSM Standardization
bitcoin = ["dep:bitcoin", "dep:bitcoincore-rpc", "dep:miniscript", "dep:bdk_wallet"]
rust-bitcoin = ["bitcoin"]  # Alias for backward compatibility

# Mobile SDK features  
ffi = ["std"]
mobile = ["ffi", "std", "bitcoin", "dep:uniffi", "dep:jni"]

# Web5 integration features
web5 = ["dep:web5", "dep:jsonwebtoken", "dep:multibase", "dep:multihash"]

# Enterprise features
enterprise = ["dep:sqlx", "dep:yubihsm", "dep:sgx_urts"]

# [AIS-3] HSM Features - Standardized with intelligent fallback
hsm = ["hsm-software"]  # Default to software HSM (always available)
hsm-full = ["hsm-software", "hsm-hardware", "hsm-bitcoin", "hsm-simulator"]
hsm-software = []  # Software HSM - no external dependencies, always available
hsm-hardware = ["dep:yubihsm", "dep:sgx_urts"]  # Hardware HSM devices
hsm-bitcoin = ["bitcoin", "hsm-software"]  # Bitcoin-specific HSM operations
hsm-simulator = ["hsm-software"]  # Simulator for testing
hsm-production = ["hsm-hardware", "hsm-bitcoin"]  # Production-ready HSM

# API features
api = ["std"]

# Complete system (including all features)
complete = ["bitcoin", "mobile", "web5", "enterprise", "hsm-full"]

[dependencies]
# === Core Dependencies (using workspace versions) ===
bitcoin = { workspace = true, optional = true }
secp256k1 = { workspace = true }
bitcoincore-rpc = { workspace = true, optional = true }
miniscript = { workspace = true, optional = true }
bdk_wallet = { workspace = true, optional = true }

tokio = { workspace = true }
futures = { workspace = true }
async-trait = { workspace = true }

serde = { workspace = true }
serde_json = { workspace = true }
humantime-serde = { workspace = true }

axum = { workspace = true }
tower = { workspace = true }
tower-http = { workspace = true }
hyper = { workspace = true }

chrono = { workspace = true }
uuid = { workspace = true }
anyhow = { workspace = true }
thiserror = { workspace = true }
tracing = { workspace = true }
tracing-subscriber = { workspace = true }
log = { workspace = true }
walkdir = { workspace = true }
sha2 = { workspace = true }
hickory-resolver = { workspace = true }
rand_distr = { workspace = true }

# Mobile & FFI (optional)
uniffi = { version = "0.25.0", optional = true }
jni = { version = "0.21.1", optional = true }
regex = "1.11.1"
hex = "0.4.3"
semver = "1.0.26"
reqwest.workspace = true
syn = { version = "2.0.104", features = ["full"] }
url = "2.5.4"
rand.workspace = true
once_cell.workspace = true
base64 = "0.22.1"
chacha20poly1305.workspace = true
argon2 = "0.5.3"
zeroize = "1.8.1"
dashmap.workspace = true
rayon.workspace = true
aes-gcm.workspace = true
blake3.workspace = true
mockall.workspace = true
getrandom = "0.3.3"

[target.'cfg(target_os = "android")'.dependencies]
ndk = { version = "0.8.0", optional = true }

# Web5 (optional)
web5 = { git = "https://github.com/TBD54566975/web5-rs", rev = "310d79c9", optional = true }
jsonwebtoken = { version = "9.3.1", features = ["use_pem"], optional = true }
multibase = { version = "0.9.1", features = ["std"], optional = true }
multihash = { version = "0.19.3", features = ["std"], optional = true }

# Utilities
once_cell = { workspace = true }
lazy_static = { workspace = true }
dashmap = { workspace = true }
rand = { workspace = true }
blake3 = { workspace = true }
rayon = { workspace = true }
aes-gcm = { workspace = true }
mockall = { workspace = true }
hickory-resolver = { workspace = true }
sha2 = { workspace = true }
log = { workspace = true }
walkdir = { workspace = true }
rand_distr = { workspace = true }

# === Enterprise Dependencies (not in workspace) ===
yubihsm = { version = "0.42.1", optional = true }
sgx_urts = { version = "1.1.1", optional = true }
sqlx = { version = "0.8.2", features = ["runtime-tokio-rustls", "postgres"], optional = true }

[dev-dependencies]
criterion = { workspace = true }
mockall = { workspace = true }
tempfile = { workspace = true }
tokio-test = { workspace = true }
tower-test = { workspace = true }
test-log = { workspace = true }
wiremock = { workspace = true }

[build-dependencies]
# For mobile builds
uniffi = { version = "0.25.0", optional = true }

[[bin]]
name = "anya-core"
path = "src/bin/main.rs"
required-features = ["std"]

[profile.release]
opt-level = 3
lto = true
codegen-units = 1
panic = "abort"

[profile.dev]
opt-level = 0
debug = true
overflow-checks = true

# Mobile-specific profiles
[profile.mobile-release]
inherits = "release"
opt-level = "z"  # Optimize for size
lto = "fat"
codegen-units = 1
strip = true
