[workspace]
members = [
    "anya-bitcoin",
    "anya-extensions" # Add this for better workspace organization
]

[package]
name = "anya-core"
version = "1.1.0"
edition = "2021"
rust-version = "1.63.0" # Explicit MSRV following rust-bitcoin standards
description = "Enterprise-grade Bitcoin Infrastructure Platform"
authors = ["botshelomokoka@gmail.com"]
license = "MIT"
repository = "https://github.com/anya-org/anya-core"
readme = "README.md" # Following API guidelines for discoverability
keywords = ["bitcoin", "cryptocurrency", "blockchain", "enterprise", "hexagonal"]
categories = ["api-bindings", "cryptography::cryptocurrencies"] # Improve crates.io discoverability

[features]
default = ["std", "rust-bitcoin"]
# Feature flag for HSM functionality
hsm = ["dep:sha2", "dep:hmac"]
# Feature flag for complete system (including HSM)
complete = ["hsm"]
std = []
# Bitcoin implementation features
bitcoin_integration = []
rust-bitcoin = ["bitcoin", "bdk"]
# RSK integration for Bitcoin verification
rsk = []
# Add alignment-focused feature for system optimization
system-alignment = ["bitcoin_integration", "hsm"] # New feature for enhanced alignment

[dependencies]
# API dependencies
axum = "=0.8.4"
tower = "=0.5.2"
tower-http = { version = "=0.6.6", features = ["cors", "trace"] }
hyper = { version = "=1.6.0", features = ["full"] }
tokio = { version = "=1.45.1", features = ["full"] }

# Bitcoin dependencies with enhanced consensus safety
bitcoin = { version = "0.32", features = [
    "std", "serde", "rand", "bitcoinconsensus", "secp-recovery", 
    "base64", "rand-std", "bitcoinconsensus-std",
    "consensus" # Add explicit consensus feature for alignment
], optional = true }
secp256k1 = { version = "0.29", features = ["rand-std", "global-context", "recovery"] }
bdk = { version = "0.30", optional = true, features = ["std", "compiler"] }
miniscript = { version = "12.3", features = ["std", "compiler"] } # Enhanced for better policy compilation
bip39 = { version = "2.0", features = ["std"] }

# Enhanced Web5/DID dependencies for better alignment
web5 = { git = "https://github.com/TBD54566975/web5-rs", rev = "310d79c9", features = ["std"] }
jsonwebtoken = { version = "=9.3.1", features = ["use_pem"] } # Enhanced JWT support
multibase = { version = "=0.9.1", features = ["std"] }
multihash = { version = "=0.19.3", features = ["std"] }

# Serialization with enhanced features for system alignment
serde = { version = "1.0.219", features = ["derive", "rc"] } # Add rc for reference counting
serde_json = { version = "1.0.140", features = ["std", "preserve_order"] } # Maintain order for consensus
humantime-serde = "=1.1.1"
getrandom = { version = "=0.3.3", features = ["std"] }
url = { version = "=2.5.4", features = ["serde"] }
toml = { version = "0.8.12", features = ["preserve_order"] } # Maintain configuration order

# Enhanced error handling for better system alignment
anyhow = { version = "1.0.98", features = ["std", "backtrace"] } # Better error tracking
thiserror = { version = "2.0.12", features = ["std"] }

# Enhanced logging for system monitoring
tracing = { version = "0.1.41", features = ["std", "attributes"] }
tracing-subscriber = { version = "0.3.19", features = ["env-filter", "json", "fmt"] }

# System alignment focused utilities
async-trait = "0.1.88"
clap = { version = "=4.5.39", features = ["derive", "env", "color"] } # Enhanced CLI
base64 = "=0.22.1"
uuid = { version = "1.17.0", features = ["v4", "serde", "fast-rng"] }
chrono = { version = "0.4.41", features = ["serde", "std"] }
rand = { version = "0.8.5", features = ["std", "std_rng"] }
argon2 = { version = "=0.5.3", features = ["std", "password-hash"] }
hex = { version = "0.4.3", features = ["std"] }
log = { version = "0.4.27", features = ["std"] }
reqwest = { version = "0.12.19", features = ["json", "blocking", "rustls-tls"] } # Enhanced security

# ...existing code...

# Conditionally required dependencies (HSM feature and general codebase)
sha2 = { version = "0.10.9", optional = true }
hmac = { version = "=0.12.1", optional = true }
zeroize = "=1.8.1"
criterion = "0.6.0"
walkdir = "2.5.0"
once_cell = "1.21.3"
dashmap = "6.1.0"
rayon = "1.10.0"
blake3 = "1.8.2"
semver = "1.0.26"
syn = { version = "2.0.101", features = ["full", "parsing"] }

colored = "2.1.0"
anya-bitcoin = { path = "./anya-bitcoin" }
bitflags = "2.5.0"

[dev-dependencies]
mockall = "=0.13.1"
tokio-test = "=0.4.4"
tower-test = "=0.4.0"

# [patch.crates-io]
# rand = "0.9.1"
# rand_core = "0.9.3"

[workspace.package]
version = "1.1.0"
edition = "2021"
authors = ["botshelomokoka@gmail.com"]
license = "MIT"
description = "Enterprise-grade Bitcoin Infrastructure Platform"
repository = "https://github.com/anya-org/anya-core"

[workspace.dependencies]
bdk = { version = "0.30" }
secp256k1 = { version = "0.29", features = ["rand-std", "global-context"] }
anyhow = "1.0.98"
thiserror = "2.0.12"
async-trait = "0.1.88"
serde = { version = "1.0.219", features = ["derive"] }
serde_json = "1.0.140"
tokio = { version = "1.45.1", features = ["full"] }
tracing = "0.1.41"
tracing-subscriber = { version = "0.3.19", features = ["env-filter"] }
hex = "0.4.3"
log = "0.4.27"
futures = "0.3.31"
rand = "0.8.5"
bitcoincore-rpc = "0.17.0"
web5 = { git = "https://github.com/TBD54566975/web5-rs" }

[lib]
name = "anya"
path = "src/lib.rs"

[[bin]]
name = "anya"
path = "src/main.rs"

# ...other binary definitions as needed...


